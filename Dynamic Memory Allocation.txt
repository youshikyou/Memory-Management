4.1 Heap Memory
    Heap memory, also know as dynamic memory , is an important resource available to programs (and programmers) to store data. 
    The 4.1.1 diagram again shows the layout of virtual memory with the heap being right above the BSS and Data segment.
    As mentioned earlier, the heap memory grows upwards while the stack grows in the opposite direction. We have seen in the last lesson that the automatic stack memory shrinks and grows with each function call and local variable. As soon as the scope of a variable is left, it is automatically deallocated and the stack pointer is shifted upwards accordingly.

    Heap memory is different in many ways: The programmer can request the allocation of memory by issuing a command such as malloc 
    or new (more on that shortly). This block of memory will remain allocated until the programmer explicitly issues a command 
    such as free or delete. The huge advantage of heap memory is the high degree of control a programmer can exert, 
    albeit at the price of greater responsibility since memory on the heap must be actively managed.

    Let us take a look at some properties of heap memory:

    1.As opposed to local variables on the stack, memory can now be allocated in an arbitrary scope (e.g. inside a function) 
    without it being deleted when the scope is left. Thus, as long as the address to an allocated block of memory is returned by a function, 
    the caller can freely use it.

    2.Local variables on the stack are allocated at compile-time. Thus, the size of e.g. a string variable might not be appropriate 
    as the length of the string will not be known until the program is executed and the user inputs it. With local variables, 
    a solution would be to allocate a long-enough array of and hope that the actual length does not exceed the buffer size. 
    With dynamically allocated heap memory, variables are allocated at run-time. This means that the size of the above-mentioned string variable
    can be tailored to the actual length of the user input.

    3.Heap memory is only constrained by the size of the address space and by the available memory. 
    With modern 64 bit operating systems and large RAM memory and hard disks the programmer commands a vast amount of memory. 
    However, if the programmer forgets to deallocate a block of heap memory, it will remain unused until the program is terminated. 
    This is called a "memory leak".

    4.Unlike the stack, the heap is shared among multiple threads, which means that memory management for the heap needs to take concurrency 
    into account as several threads might compete for the same memory resource.

    5.When memory is allocated or deallocated on the stack, the stack pointer is simply shifted upwards or downwards. 
    Due to the sequential structure of stack memory management, stack memory can be managed (by the operating system) easily and securely. 
    With heap memory, allocation and deallocation can occur arbitrarily, depending on the lifetime of the variables. 
    This can result in fragmented memory over time, which is much more difficult and expensive to manage.



    Memory Fragmentation
    A classic symptom of memory fragmentation is that you try to allocate a large block and you canâ€™t, 
    even though you appear to have enough memory free. On systems with virtual memory however, this is less of a problem, 
    because large allocations only need to be contiguous in virtual address space, not in physical address space.

    When memory is heavily fragmented however, memory allocations will likely take longer because the memory allocator 
    has to do more work to find a suitable space for the new object.

4.3 Using malloc and free
    So far we only considered primitive data types, whose storage space requirement was already fixed at compile time 
    and could be scheduled with the building of the program executable. However, it is not always possible to plan the memory requirements 
    exactly in advance, and it is inefficient to reserve the maximum memory space each time just to be on the safe side. 
    C and C++ offer the option to reserve memory areas during the program execution, i.e. at runtime. 
    It is important that the reserved memory areas are released again at the "appropriate point" to avoid memory leaks. 
    It is one of the major challenges in memory management to always locate this "appropriate point" though.



    Allocating Dynamic Memory
    To allocate dynamic memory on the heap means to make a contiguous memory area accessible to the program at runtime 
    and to mark this memory as occupied so that no one else can write there by mistake.

    To reserve memory on the heap, one of the two functions malloc (stands for Memory Allocation) 
    or calloc (stands for Cleared Memory Allocation) is used. The header file stdlib.h or malloc.h must be included to use the functions.

    Here is the syntax of malloc and calloc in C/C++:
    pointer_name = (cast-type*) malloc(size);
    pointer_name = (cast-type*) calloc(num_elems, size_elem);

    malloc is used to dynamically allocate a single large block of memory with the specified size. 
    It returns a pointer of type void which can be cast into a pointer of any form.

    calloc is used to dynamically allocate the specified number of blocks of memory of the specified type. 
    It initializes each block with a default value '0'.

    Both functions return a pointer of type void which can be cast into a pointer of any form. 
    If the space for the allocation is insufficient, a NULL pointer is returned.

    See example4.3.1malloc.cpp



    Memory for Arrays and Structs
    Since arrays and pointers are displayed and processed identically internally, 
    individual blocks of data can also be accessed using array syntax:

        int *p = (int*)malloc(3*sizeof(int));
        p[0] = 1; p[1] = 2; p[2] = 3;
        printf("address=%p, second value=%d\n", p, p[1]);
    
    Until now, we have only allocated memory for a C/C++ data primitive (i.e. int). 
    However, we can also define a proprietary structure which consists of several primitive data types and use malloc or calloc 
    in the same manner as before:

        struct MyStruct {
                            int i; 
                            double d; 
                            char a[5];
                        };

        MyStruct *p = (MyStruct*)calloc(4,sizeof(MyStruct));
        p[0].i = 1; 
        p[0].d = 3.14159; 
        p[0].a[0] = 'a';
    After defining the struct MyStruct which contains a number of data primitives, a block of memory four times the size of MyStruct 
    is created using the calloc command. 

    The size of the memory area reserved with malloc or calloc can be increased or decreased with the realloc function.

    pointer_name = (cast-type*) realloc( (cast-type*)old_memblock, new_size );

    To do this, the function must be given a pointer to the previous memory area and the new size in bytes. 
    Depending on the compiler, the reserved memory area is either (a) expanded or reduced internally 
    (if there is still enough free heap after the previously reserved memory area) or (b) a new memory area is reserved in the desired size 
    and the old memory area is released afterwards.

    The data from the old memory area is retained, i.e. if the new memory area is larger, the data will be available within new memory area 
    as well. If the new memory area is smaller, the data from the old area will be available only up until the site of the new area 
    - the rest is lost.

    In the example4.3.2REALLOC.CPP, a block of memory of initially 8 bytes (two integers) is resized to 16 bytes (four integers) using realloc.

    Note that realloc has been used to increase the memory size and then decrease it immediately after assigning the values 3 and 4 
    to the new blocks. The output looks like the following:

        address=0x100300060, value=1
        address=0x100300064, value=2
        address=0x100300068, value=3
        address=0x10030006c, value=4
    
    Interestingly, the pointers p+2 and p+3 can still access the memory location they point to. 
    Also, the original data (numbers 3 and 4) is still there. So realloc will not erase memory but merely mark it as "available" 
    for future allocations. It should be noted however that accessing a memory location after such an operation must be avoided 
    as it could cause a segmentation fault.



    Freeing up Memory
    If memory has been reserved, it should also be released as soon as it is no longer needed. 
    If memory is reserved regularly without releasing it again, the memory capacity may be exhausted at some point. 
    If the RAM memory is completely used up, the data is swapped out to the hard disk, which slows down the computer significantly.

    The free function releases the reserved memory area so that it can be used again or made available to other programs. 
    To do this, the pointer pointing to the memory area to be freed is specified as a parameter for the function. 
    In the example4.3.2free.cpp, a memory area is reserved and immediately released again.

    Some things should be considered with dynamic memory management, whose neglect in some cases might result in unpredictable 
    program behavior or a system crash - in some cases unfortunately without error messages from the compiler or the operating system:

    1.free can only free memory that was reserved with malloc or calloc.

    2.free can only release memory that has not been released before. Releasing the same block of memory twice will result in an error.
    A pointer is called a "dangling pointer", holding the address to the memory location which has been freed, but may not access it anymore. 

    3.Memory allocated with malloc or calloc is not subject to the familiar rules of variables in their respective scopes. 
    This means that they exist independently of block limits until they are released again or the program is terminated.
    However, the pointers which refer to such heap-allocated memory are created on the stack and thus only exist within a limited scope. 
    As soon as the scope is left, the pointer variable will be lost - but not the heap.